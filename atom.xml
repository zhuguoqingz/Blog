<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>web</title>
  
  
  <link href="/Blog.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/Blog/"/>
  <updated>2018-11-22T10:20:35.229Z</updated>
  <id>http://yoursite.com/Blog/</id>
  
  <author>
    <name>朱国庆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>axios的封装</title>
    <link href="http://yoursite.com/Blog/2018/11/22/axios/"/>
    <id>http://yoursite.com/Blog/2018/11/22/axios/</id>
    <published>2018-11-22T10:04:33.000Z</published>
    <updated>2018-11-22T10:20:35.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装axios"><a href="#1、安装axios" class="headerlink" title="1、安装axios"></a>1、安装axios</h2><blockquote><p>先安装<br>npm install axios<br>然后！<br>npm install –save axios vue-axios<br>配置模板！<br>新建api文件–&gt;建一个api.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _axios <span class="keyword">from</span> <span class="string">'axios'</span> </span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="comment">// 新建一个请求头</span></span><br><span class="line"><span class="keyword">const</span> Header = <span class="string">"http://guanjia.uzhuang.com/index.php?r="</span>;</span><br><span class="line"><span class="comment">//获取token</span></span><br><span class="line"><span class="keyword">const</span> axios = _axios.create(&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    transformRequest: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//依自己的需求对请求数据进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data = qs.stringify(data);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前是否存在token</span></span><br><span class="line">    <span class="comment">// config.withCredentials = true // 允许携带token ,这个是解决跨域产生的相关问题</span></span><br><span class="line">    <span class="keyword">let</span> token = getCookie(<span class="string">'bId_token_key'</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="comment">// Authorization 请求头的键是前后台约定</span></span><br><span class="line">        config.headers[<span class="string">'tokenkey'</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写后台路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Method = &#123;</span><br><span class="line">        getOneRecord: <span class="string">'order/get-order-list'</span>, <span class="comment">// 全部订单</span></span><br><span class="line">        getTaocanRecord: <span class="string">'order/get-package'</span>, <span class="comment">// 套餐</span></span><br><span class="line">        getchengshiRecord: <span class="string">'order/get-area'</span>, <span class="comment">// 套餐</span></span><br><span class="line">        postFormRecord: <span class="string">"order/create-order"</span>, <span class="comment">//表单提交</span></span><br><span class="line">        getinfoRecord: <span class="string">"order/get-order-info"</span>, <span class="comment">//详情</span></span><br><span class="line"></span><br><span class="line">        changeFormRecord: <span class="string">"order/edit-order"</span>, <span class="comment">// 修改订单</span></span><br><span class="line">        getphoneNum: <span class="string">"order/make-phone-call"</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getphoneNum = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(Header + Method.getphoneNum, &#123; params &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result.data</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeFormRecord = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.post(Header + Method.changeFormRecord, params)</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result.data</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、安装axios&quot;&gt;&lt;a href=&quot;#1、安装axios&quot; class=&quot;headerlink&quot; title=&quot;1、安装axios&quot;&gt;&lt;/a&gt;1、安装axios&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先安装&lt;br&gt;npm install axios&lt;br&gt;然
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-vue" scheme="http://yoursite.com/Blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>session的使用</title>
    <link href="http://yoursite.com/Blog/2018/11/22/session%E4%BC%A0%E5%8F%82/"/>
    <id>http://yoursite.com/Blog/2018/11/22/session传参/</id>
    <published>2018-11-22T09:32:14.000Z</published>
    <updated>2018-12-19T06:34:55.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、session传值"><a href="#1、session传值" class="headerlink" title="1、session传值"></a>1、session传值</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"name"</span>,value);</span><br><span class="line">前面是传的名字,后面跟的是值</span><br></pre></td></tr></table></figure><h2 id="2、session取值"><a href="#2、session取值" class="headerlink" title="2、session取值"></a>2、session取值</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.type=sessionStorage.getItem(<span class="string">"name"</span>)</span><br><span class="line">声明一个变量存储获获取到的session值</span><br></pre></td></tr></table></figure><h2 id="3、session的生命周期"><a href="#3、session的生命周期" class="headerlink" title="3、session的生命周期"></a>3、session的生命周期</h2><p><strong>创建:</strong> 当客户端第一次访问某个jsp或者Servlet时候，服务器会为当前会话创建一个 <strong>SessionId</strong> ,每次客户端向服务端发送请求时，都会将此 <strong>SessionId</strong> 携带过去，服务端会对此 <strong>SessionId</strong> 进行校验。<br><strong>活动:</strong><br><strong>销毁:</strong><br>Session的销毁只有三种方式：<br>1、调用了session.invalidate()方法<br>2、Session过期（超时）<br>3、服务器重新启动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、session传值&quot;&gt;&lt;a href=&quot;#1、session传值&quot; class=&quot;headerlink&quot; title=&quot;1、session传值&quot;&gt;&lt;/a&gt;1、session传值&lt;/h2&gt; &lt;figure class=&quot;highlight javascript&quot;
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-web存储" scheme="http://yoursite.com/Blog/tags/web%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="http://yoursite.com/Blog/2018/08/17/git/"/>
    <id>http://yoursite.com/Blog/2018/08/17/git/</id>
    <published>2018-08-17T02:36:54.000Z</published>
    <updated>2018-09-25T04:35:01.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><blockquote><p> <font color="#FF0000">  git branch  </font><br>   <strong>查看当前分支</strong><br>   <font color="#FF0000">  git log     </font><br>   <strong>显示当前分支的版本历史查看时间</strong><br>   <font color="#FF0000">  git status  </font><br>   <strong>显示有变更的文件</strong><br>   <font color="#FF0000">  git log -5 - -pretty - -oneline  </font><br>   <strong>列出过去的5次提交</strong><br>   <font color="#FF0000">  git branch -l </font><br>   <strong>列出本地分支</strong>e<br>   <font color="#FF0000">  git branch -r </font><br>   <strong>列出所有远程分支</strong><br>   <font color="#FF0000">  git branch -a </font><br>   <strong>列出全部分支(本地和远程分支)</strong><br>   <font color="#FF0000">  git remote -v </font><br>   <strong>显示所有远程仓库</strong></p></blockquote><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote><p> <font color="#FF0000">  git branch  name  </font><br>   <strong>新建一个本地分支但停留在当前分支</strong><br>  <font color="#FF0000">  git checkout -b name  </font><br>   <strong>新建一个本地分支并切换到当前分支</strong><br>  <font color="#FF0000">  git checkout -d name  </font><br>   <strong>删除当前本地分支</strong><br>  <font color="#FF0000">  git pull [ remote ] [ branch ]  </font><br>   <strong>上传本地分支到远程仓库</strong><br>  <font color="#FF0000">  git pull [ remote ] –force  </font><br>  <strong>强行推送当前分支到远程仓库，即使有冲突</strong><br>  <font color="#FF0000">  git pull [ remote ] –all  </font><br>  <strong>推送所有的分支到远程仓库</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看信息&quot;&gt;&lt;a href=&quot;#查看信息&quot; class=&quot;headerlink&quot; title=&quot;查看信息&quot;&gt;&lt;/a&gt;查看信息&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;font color=&quot;#FF0000&quot;&gt;  git branch  &lt;/font&gt;&lt;br&gt; 
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-git常用命令" scheme="http://yoursite.com/Blog/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>CSS性能优化</title>
    <link href="http://yoursite.com/Blog/2018/08/10/CSS%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/Blog/2018/08/10/CSS性能优化/</id>
    <published>2018-08-10T06:33:14.000Z</published>
    <updated>2018-08-10T07:35:50.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内联首屏关键CSS"><a href="#内联首屏关键CSS" class="headerlink" title="内联首屏关键CSS"></a>内联首屏关键CSS</h2><p>大家都习惯于link标签引用外部CSS文件，将CSS直接内敛到HTML文档中能使CSS更快速地下载，而外部CSS文件时,<br>需要在HTML文档下载完成后才知道所要引用的CSS文件，然后才下载它们。所以,<strong>内联CSS能够使浏览器开始页面渲染的时间提前</strong>因为在HTML下载完成之后就能渲染了。<br>这种方式并不适用于内联较大的CSS文件。因为初始拥塞窗口3存在限制（TCP相关概念，通常是 14.6kB，压缩后大小），如果内联CSS后的文件超出了这一限制，系统就需要在服务器和浏览器之间进行更多次的往返，这样并不能提前页面渲染时间。<strong>只将渲染首屏内容所需的关键CSS内联到HTML中。</strong></p><h2 id="异步加载CSS"><a href="#异步加载CSS" class="headerlink" title="异步加载CSS"></a>异步加载CSS</h2><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建link标签</span></span><br><span class="line"><span class="keyword">let</span> MyCss = <span class="built_in">document</span>.createElement( <span class="string">"link"</span> );</span><br><span class="line">MyCss.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line">MyCss.href = <span class="string">'Mystyle.css'</span>;</span><br><span class="line"><span class="comment">//插入到header的最后位置</span></span><br><span class="line"><span class="built_in">document</span>.head.insertBefore( MyCss, <span class="built_in">document</span>.head.childNodes[ <span class="built_in">document</span>.head.childNodes.length - <span class="number">1</span> ].nextSibling );</span><br></pre></td></tr></table></figure></code></pre><h3 id="减少使用昂贵的属性"><a href="#减少使用昂贵的属性" class="headerlink" title="减少使用昂贵的属性"></a>减少使用昂贵的属性</h3><p>在浏览器绘制屏幕时，所有需要浏览器进行操作或计算的属性相对而言都需要花费更大的代价。当页面发生重绘时，它们会降低浏览器的渲染性能。所以在编写CSS时，我们应该尽量减少使用昂贵属性，<strong>如box-shadow/border-radius/filter/透明度/:nth-child等。</strong><br>可以优先选择没有昂贵属性或昂贵属性更少的方案，如果每次都这样的选择，网站的性能会在不知不觉中得到一定的提升。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内联首屏关键CSS&quot;&gt;&lt;a href=&quot;#内联首屏关键CSS&quot; class=&quot;headerlink&quot; title=&quot;内联首屏关键CSS&quot;&gt;&lt;/a&gt;内联首屏关键CSS&lt;/h2&gt;&lt;p&gt;大家都习惯于link标签引用外部CSS文件，将CSS直接内敛到HTML文档中能使CS
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-CSS性能优化" scheme="http://yoursite.com/Blog/tags/CSS%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>VUE的学习</title>
    <link href="http://yoursite.com/Blog/2018/08/07/VUE%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/Blog/2018/08/07/VUE的学习/</id>
    <published>2018-08-07T10:34:21.000Z</published>
    <updated>2018-11-22T10:03:20.852Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象和数组 {} []<br>pop push unshift shift slice splice reverse sotr indeOf lastIndexof concat<br>能改变原色的方法 pop push unshift shift splice reverse sort  vue中起名数组的变异<br>forEach 循环特点没有:返回值</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">&lt;div&gt;</span><br><span class="line">      &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"welcome"</span>&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" v-model="val"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;                 </span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name:'test',</span></span><br><span class="line"><span class="regexp">        data() &#123;</span></span><br><span class="line"><span class="regexp">            return &#123;</span></span><br><span class="line"><span class="regexp">                msg:'nihao',</span></span><br><span class="line"><span class="regexp">                fullName:'zhangsan',</span></span><br><span class="line"><span class="regexp">                val:'',</span></span><br><span class="line"><span class="regexp">            &#125; </span></span><br><span class="line"><span class="regexp">        &#125;,  </span></span><br><span class="line"><span class="regexp">        filter: &#123;&#125;,   </span></span><br><span class="line"><span class="regexp">        watch:&#123; </span></span><br><span class="line"><span class="regexp">            val(newval,oldval)&#123;</span></span><br><span class="line"><span class="regexp">                console.log(newval)</span></span><br><span class="line"><span class="regexp">                console.log(oldval)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        computed: &#123;&#125;,  /</span><span class="regexp">/计算</span></span><br><span class="line"><span class="regexp">        components: &#123;&#125; /</span><span class="regexp">/导入组件</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><blockquote><p><strong>v-if</strong>  判断是否加载固定内容 true就加载false则不加载<br>  语法: v-if(a==0)  判断表达式<br>  特点: 控制元素插入或删除，而不是隐藏（v-show是隐藏）<br>  v-if和v-for的区别 当一起使用时，v-for 具有比 v-if 更高的优先级。<br>  v-if的安全级别更高，v-show只是隐藏了，通过页面 <strong>源代码</strong> 还是可以看到，安全级别低<br>  <strong>v-else</strong> 紧跟在v-if后面，表示v-if条件不成立时执行<br>  <strong>v-else-if</strong> 表示多次在v-if 和 v-else之间<br>  <strong>v-show</strong> 表示显示隐藏<br>  <strong>v-on:click</strong> 简写:@click<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p @click=<span class="string">" func(2)"</span>&gt;dianw&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">            func:function(a)&#123;</span></span><br><span class="line"><span class="regexp">                alert(a);</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>  <strong>v-for</strong> 把一个数组对应成一组元素<br>  v-for 支持一个可选的第二个参数为当前项的索引。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">       &lt;tr v-<span class="keyword">for</span>=<span class="string">"(list,index) in items"</span>&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123;index&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">           &lt;td&gt;&#123;&#123;list.age&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123;list.name&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">           &lt;td&gt;&#123;&#123;list.sex&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line">       &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>table&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">         <span class="keyword">return</span>&#123;</span><br><span class="line">           items:[</span><br><span class="line">             &#123;<span class="string">"age"</span>:<span class="string">"20"</span>,<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"sex"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"age"</span>:<span class="string">"10"</span>,<span class="string">"name"</span>:<span class="string">"shangsan"</span>,<span class="string">"sex"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"age"</span>:<span class="string">"30"</span>,<span class="string">"name"</span>:<span class="string">"wanger"</span>,<span class="string">"sex"</span>&#125;,</span><br><span class="line">           ],</span><br><span class="line">         &#125;,</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><blockquote><p>push() 后面添加<br>  pop() 后面删除<br>  shift() 前面删除<br>  unshift() 前面添加<br>  splice() 向数组添加删除元素<br>  sort() 顺序排序<br>  reverse() 倒序排序</p></blockquote><h3 id="一个对象的-v-for"><a href="#一个对象的-v-for" class="headerlink" title="一个对象的 v-for"></a>一个对象的 v-for</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;table&gt;</span><br><span class="line">      &lt;tr v-<span class="keyword">for</span>=<span class="string">"(a,key,index) in b"</span>&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/td&gt;       /</span><span class="regexp">/ 0 - name - liss</span></span><br><span class="line"><span class="regexp">      &lt;/</span>tr&gt;</span><br><span class="line">  &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">   return &#123;</span></span><br><span class="line"><span class="regexp">              object:&#123;</span></span><br><span class="line"><span class="regexp">                  name:'liss',</span></span><br><span class="line"><span class="regexp">                  age:'21',</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp">          &#125; </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;  </span><br><span class="line">可以用 v-<span class="keyword">for</span> 通过一个对象的属性来迭代</span><br><span class="line">也可以提供第二个的参数为键名</span><br><span class="line">第三个参数为索引</span><br></pre></td></tr></table></figure><p>  更改对象检测时 filter(), concat() 和 slice()    <strong>总是返回一个新数组</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-text === &#123;&#123;&#125;&#125; 防止&#123;&#123;&#125;&#125; 出现在页面上</span><br><span class="line">v-once只绑定一次 当数据再次发生变化 也不导致页面刷新</span><br><span class="line">v-html把数据当字符进行渲染</span><br></pre></td></tr></table></figure></p><h3 id="VUE返回上一页"><a href="#VUE返回上一页" class="headerlink" title="VUE返回上一页"></a>VUE返回上一页</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.back()</span><br></pre></td></tr></table></figure><h3 id="VUE过滤"><a href="#VUE过滤" class="headerlink" title="VUE过滤"></a>VUE过滤</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&#123;scope.row.order_state | pay_filter&#125;&#125;</span><br><span class="line"> filters: &#123;</span><br><span class="line">      pay_filter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"待处理"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"已处理"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"已完结"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">@click=<span class="string">"qo(scope.row.id,scope.row.order_state)"</span></span><br><span class="line">传值id和参数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象和数组 {} []&lt;br&gt;pop push unshift shift slice splice reverse sotr indeOf lastIndexof concat&lt;br&gt;能改变原色的方法 pop push unshift shift splice rev
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-vue" scheme="http://yoursite.com/Blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js基础 复习</title>
    <link href="http://yoursite.com/Blog/2018/08/06/js%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/Blog/2018/08/06/js基础/</id>
    <published>2018-08-06T02:02:49.000Z</published>
    <updated>2018-12-18T03:36:49.324Z</updated>
    
    <content type="html"><![CDATA[<p>关于js的注释使用的是 //  这是一种单行注释方法  /<em> </em>/ 是多行注释的方法<br>数据类型  js一共有六种数据类型分别是</p><h2 id="1-number"><a href="#1-number" class="headerlink" title="1.number"></a>1.number</h2><blockquote><p>number类型包含了整数和浮点数,浮点数的值必须包含一个小数点,小数点的后面至少有一位小数<br>  NaN 非数字类型。特点是涉及到任何关于NaN的操作，都会返回NaN NaN不等于自身。<br>  isNaN() 函数用于检查其参数是否是非数字值<br>  isNaN(123) //false isNaN(‘hello’)  //true</p></blockquote><h2 id="2-String类型"><a href="#2-String类型" class="headerlink" title="2.String类型"></a>2.String类型</h2><blockquote><p> 字符串有length属性<br>  字符串的转换:转换函数String();适用于任何数据类型(null,undefined 转换后为 null 和 undefined) toString()方法<br>  (null,defind没有toString()方法)</p></blockquote><h2 id="3-Boolean类型"><a href="#3-Boolean类型" class="headerlink" title="3.Boolean类型"></a>3.Boolean类型</h2><p>  该类型只有两个值 true 和 false</p><h2 id="4-Undefined类型"><a href="#4-Undefined类型" class="headerlink" title="4.Undefined类型"></a>4.Undefined类型</h2><blockquote><p>该类型只有一个值即undefined值 使用var声明了变量,但没有给变量初始化值那么这个变量的值就是undefined。</p></blockquote><h2 id="5-Null"><a href="#5-Null" class="headerlink" title="5.Null"></a>5.Null</h2><p>null类型被看做空对象指针,前文说到null类型也是空的对象引用。</p><h2 id="6-Object类型"><a href="#6-Object类型" class="headerlink" title="6.Object类型"></a>6.Object类型</h2><blockquote><p> js中对象是一组属性与方法的集合，这里就要说到引用类型了，引用类型是一种数据结构用于将数据和功能组织在一起。引用数据类型<br>  有时候被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p></blockquote><h1 id="三大引用类型"><a href="#三大引用类型" class="headerlink" title="三大引用类型"></a>三大引用类型</h1><h2 id="1-Object类型"><a href="#1-Object类型" class="headerlink" title="1.Object类型"></a>1.Object类型</h2><p>  我们看到的大多数类型都是Object构造函数，如下所示<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"Micheal"</span>;</span><br><span class="line">person.age = <span class="number">24</span>;</span><br></pre></td></tr></table></figure></p><p>  第二种方式是使用对象字面量表示方法，如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">　　name : <span class="string">"Micheal"</span>,</span><br><span class="line">　　age : <span class="number">24</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="2-Array类型"><a href="#2-Array类型" class="headerlink" title="2.Array类型"></a>2.Array类型</h2><blockquote><p>数组的每一项可以用来保存任何类型的数据，也就说，可以用数组的第一个位置来保存字符串，第二个位置保存数值，<br>第三个位置保存对象…另外，数组的大小是可以动态调整的<br>创建数组的基本方式有两种<br>第一种是使用Array构造函数 如下所示 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>,<span class="string">"yellow"</span>,<span class="string">"blue"</span>)</span><br></pre></td></tr></table></figure><p>第二种是使用数组字面量表示方法,如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br></pre></td></tr></table></figure></p><h2 id="3-Function类型"><a href="#3-Function类型" class="headerlink" title="3.Function类型"></a>3.Function类型</h2><p>每个函数都是Function类型Function类型的实例,而且都与其他的引用类型方法一样具有属性和方法。函数通常是使用函数声明语法定义的，如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这和使用函数表达定义函数的方式相差无几<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sun  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum1 + sum2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，js按照存储方式分为值类型和引用类型。那么他们的计算有什么区别呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目<span class="number">1</span>： <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">　　　　<span class="keyword">var</span> b = a;</span><br><span class="line">　　　  a = <span class="number">200</span>;</span><br><span class="line">　　　　<span class="built_in">console</span>.log (b);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目<span class="number">2</span>： <span class="keyword">var</span> a = &#123;<span class="attr">age</span> : <span class="number">20</span>&#125;;</span><br><span class="line">　　　　<span class="keyword">var</span> b = a;</span><br><span class="line">　　　　b.age = <span class="number">21</span>;</span><br><span class="line">　　　　<span class="built_in">console</span>.log (a.age);</span><br></pre></td></tr></table></figure><h3 id="题目1的答案是-100，题目2的答案是21，"><a href="#题目1的答案是-100，题目2的答案是21，" class="headerlink" title="题目1的答案是 100，题目2的答案是21，"></a>题目1的答案是 100，题目2的答案是21，</h3><blockquote><p>题目1是简单的值类型，在从一个变量向另一个变量赋值基本类型时，会在该变量上创建一个新值，然后再把该值复制到为新变量分配的位置上。<br>此时，a中保存的值为 100 ，当使用 a 来初始化 b 时，b 中保存的值也为100，但b中的100与a中的是完全独立的，该值只是a中的值的一个副本，此后，<br>这两个变量可以参加任何操作而相互不受影响。也就是说基本类型在赋值操作后，两个变量是相互不受影响的。</p><p>题目2是引用类型，当从一个变量向另一个变量赋值引用类型的值时，同样也会将存储在变量中的对象的值复制一份放到为新变量分配的空间中。<br>这时保存在变量中的是对象在堆内存中的地址，所以，与简单赋值不同，这个值的副本实际上是一个指针，而这个指针指向存储在堆内存的一个对象。那么赋值操作后，<br>两个变量都保存了同一个对象地址，则这两个变量指向了同一个对象。因此，改变其中任何一个变量，都会相互影响。<br>因此，引用类型的赋值其实是对象保存在栈区地址指针的赋值，因此两个变量指向同一个对象，任何的操作都会相互影响。</p></blockquote><h3 id="null-和-undefined-的区别-null是空-undefined是什么都没有"><a href="#null-和-undefined-的区别-null是空-undefined是什么都没有" class="headerlink" title="null 和 undefined 的区别  null是空 undefined是什么都没有"></a>null 和 undefined 的区别  null是空 undefined是什么都没有</h3><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><blockquote><p>这里使用逻辑与 &amp;  逻辑操作符的对象是布尔值，每个逻辑操作数会返回一个true 或 false<br>  逻辑与只有在两个操作都是true的时候才会是true<br>  逻辑或 操作符是 || 只要他的操作数种有一个true 逻辑或操作就将是true 如果两个是true 逻辑或也将是true 只用两个都是fales才会是false<br>  js还提供了一个逻辑非操作符 他是由一个感叹号单结构组成的 ! 逻辑非 操作符只能作用于单个逻辑操作数，其结果是把一个逻辑操作符的布尔值 取反 如果布尔值是 true 那么就取他的反为false<br>  js操作DOM的方法<br>  getAttribute 这个属性返回指定的属性名字 比如 target=”_blank”  getAttribute(“target”) 则返回target<br>  createElement 创建元素节点 比如 document.createElement(“li”) 创建了一个li元素<br>  appendChild   方法在指定元素节点的最后一个子节点添加节点<br>  insertBefore  方法可在已有的子节点前插入一个新的子节点<br>  setAttribute  方法添加指定的属性，并为其赋指定的值   </p></blockquote><h3 id="递增和递减"><a href="#递增和递减" class="headerlink" title="递增和递减(++- -)"></a>递增和递减(++- -)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">var</span> nun2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = --num1+num2;   <span class="comment">//等于21</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2;  <span class="comment">//等于21</span></span><br></pre></td></tr></table></figure><blockquote><p>在这里num3之所以等于21是因为先减去了1在计算<br>  num4等于20是因为上一个基础计算上 num1 减去了1 赋值给了全局变量num1 num4在计算的时候就是1+20=21<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">var</span> nun2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num1--+num2;   <span class="comment">//等于22</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2;  <span class="comment">//等于21</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以看到将前置递减改成后置递减发生了变化,之前num3和num4都是等于21的现在num3等于22,这里是因为在计算num3的时候使用的是num1的原始值进行计算的;而num4之所以等于21是因为在计算后num3减1赋值给了num1所以num4等于21</p></blockquote><h3 id="如果是字符串先转换成数字值-在执行加减-字符串变量变成数值变量"><a href="#如果是字符串先转换成数字值-在执行加减-字符串变量变成数值变量" class="headerlink" title="如果是字符串先转换成数字值 在执行加减 字符串变量变成数值变量"></a>如果是字符串先转换成数字值 在执行加减 字符串变量变成数值变量</h3><h3 id="在布尔值计算的时候-布尔值是false的时候-先转换为0在执行加减1的操作-布尔值的变量变成数值的变量"><a href="#在布尔值计算的时候-布尔值是false的时候-先转换为0在执行加减1的操作-布尔值的变量变成数值的变量" class="headerlink" title="在布尔值计算的时候 布尔值是false的时候 先转换为0在执行加减1的操作 布尔值的变量变成数值的变量"></a>在布尔值计算的时候 布尔值是false的时候 先转换为0在执行加减1的操作 布尔值的变量变成数值的变量</h3><h3 id="布尔值是-true的时候-先转换成1在执行加减法的操作-布尔值变成数值的变量"><a href="#布尔值是-true的时候-先转换成1在执行加减法的操作-布尔值变成数值的变量" class="headerlink" title="布尔值是 true的时候 先转换成1在执行加减法的操作 布尔值变成数值的变量"></a>布尔值是 true的时候 先转换成1在执行加减法的操作 布尔值变成数值的变量</h3><h3 id="在浮点数的时候-执行加减1的操作"><a href="#在浮点数的时候-执行加减1的操作" class="headerlink" title="在浮点数的时候 执行加减1的操作"></a>在浮点数的时候 执行加减1的操作</h3><h3 id="同于对象的时，先调用对象的valueOf-方法取得一个可操作的值-如果结果是NaN则调用toSring-方法-对象变量变成数值变量"><a href="#同于对象的时，先调用对象的valueOf-方法取得一个可操作的值-如果结果是NaN则调用toSring-方法-对象变量变成数值变量" class="headerlink" title="同于对象的时，先调用对象的valueOf()方法取得一个可操作的值 如果结果是NaN则调用toSring()方法 对象变量变成数值变量"></a>同于对象的时，先调用对象的valueOf()方法取得一个可操作的值 如果结果是NaN则调用toSring()方法 对象变量变成数值变量</h3><h2 id="五数组的方法"><a href="#五数组的方法" class="headerlink" title="五数组的方法"></a>五数组的方法</h2><p>字符串的方法<br>1、slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 第一个值是按下标开始的位置，第二个值是截取几个</span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></span><br></pre></td></tr></table></figure></p><p>2、indexOf()<br>与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">'30'</span>, <span class="string">'xyz'</span>];</span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0</span></span><br><span class="line">arr.indexOf(<span class="number">20</span>); <span class="comment">// 元素20的索引为1</span></span><br><span class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，找不到元素则返回 -1</span></span><br><span class="line">arr.indexOf(<span class="string">'30'</span>); <span class="comment">// 元素'30'的索引为2</span></span><br></pre></td></tr></table></figure></p><p>3、push和pop<br>push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回的是这新数组的长度</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 'A', 'B'] //新的数组已经被添加了数值</span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回'B'  去除数组的最后一个位置</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 'A'] 现在arr的最后一个值已经被删除</span></span><br><span class="line">arr.pop(); arr.pop(); arr.pop(); <span class="comment">// 连续pop 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure></p><p>4、unshift和shift<br>如果要往Array的前面添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="string">'A'</span>, <span class="string">'B'</span>);  <span class="comment">// 返回数组新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// ['A', 'B', 1, 2]  //在数组的前面添加了A、B</span></span><br><span class="line">arr.shift(); <span class="comment">// 'A'   //去除数组的第一个值</span></span><br><span class="line">arr; <span class="comment">// ['B', 1, 2]  //返回数组</span></span><br><span class="line">arr.shift(); arr.shift(); arr.shift(); <span class="comment">// 连续shift 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.shift(); <span class="comment">// 空数组继续shift不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []sort</span></span><br></pre></td></tr></table></figure></p><p>5、sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">54</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> x = arr.sort(); <span class="comment">// 返回  1,2,23,4,54 排序很诡异</span></span><br><span class="line"><span class="keyword">var</span> y = arr; </span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">可以做到按照我们指定的顺序来排序</span><br></pre></td></tr></table></figure></p><p>6、reverse<br>reverse()把整个Array的元素给掉个个，也就是反转：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line">arr.reverse();  </span><br><span class="line">arr; <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure></p><p>7、splice<br>splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素: 添加的元素是删除元素的开始位置</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回删除的元素 ['3', '4', '5']</span></span><br><span class="line">arr; <span class="comment">// ['1',  '2', 'A', 'B', 'B', 'B']</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br></pre></td></tr></table></figure></p><p>8、concat<br>concat()方法把当前的数组和另一个添加的数组连接起来，并返回一个新的Array<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line">added; <span class="comment">// ['A', 'B', 'C', 1, 2, 3] //返回新的数组</span></span><br><span class="line">arr; <span class="comment">// ['A', 'B', 'C'] //还是原来的数组</span></span><br><span class="line">需要注意的是，concat()方法并没有修改当前数组，而是返回了一个新的数组。</span><br><span class="line">实际上，concat()方法可以接收任意个元素和<span class="built_in">Array</span>，并且自动把<span class="built_in">Array</span>拆开，然后全部添加到新的<span class="built_in">Array</span>里。</span><br></pre></td></tr></table></figure></p><p>9、join<br>join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'</span></span><br></pre></td></tr></table></figure></p><p>如果Array的元素不是字符串，将自动转换为字符串后再连接。<br>10、sort排序<br>JavaScript的Array的sort()方法就是用于排序的，但是排序结果可能让你大吃一惊<br>如果不知道sort()方法的默认排序规则，直接对数字排序，绝对栽进坑里！<br>幸运的是，sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。<br>默认情况下，对字符串排序，是按照ASCII的大小比较的，现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能定义出忽略大小写的比较算法就可以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Goole'</span>, <span class="string">'apple'</span>, <span class="string">'anky'</span>, <span class="string">'shisa'</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line">x1 = s1.toUpperCase(); <span class="comment">//忽略大小写</span></span><br><span class="line">x2 = s2.toUpperCase();</span><br><span class="line"><span class="keyword">if</span> (x1 &gt; x2) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x2 &gt; x1) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于js的注释使用的是 //  这是一种单行注释方法  /&lt;em&gt; &lt;/em&gt;/ 是多行注释的方法&lt;br&gt;数据类型  js一共有六种数据类型分别是&lt;/p&gt;
&lt;h2 id=&quot;1-number&quot;&gt;&lt;a href=&quot;#1-number&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-javascript" scheme="http://yoursite.com/Blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Css样式</title>
    <link href="http://yoursite.com/Blog/2018/07/19/Css%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/Blog/2018/07/19/Css样式/</id>
    <published>2018-07-19T02:28:49.000Z</published>
    <updated>2018-08-10T06:36:28.278Z</updated>
    
    <content type="html"><![CDATA[<p>关于 input的点击时去掉表框颜色<br>属性:outline: none;<br>添加字符使用属性:placeholder </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于 input的点击时去掉表框颜色&lt;br&gt;属性:outline: none;&lt;br&gt;添加字符使用属性:placeholder &lt;/p&gt;

      
    
    </summary>
    
      <category term="关于前端" scheme="http://yoursite.com/Blog/categories/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-css的常用样式" scheme="http://yoursite.com/Blog/tags/css%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo构建个人博客</title>
    <link href="http://yoursite.com/Blog/2018/07/17/hexo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/Blog/2018/07/17/hexo构建个人博客/</id>
    <published>2018-07-17T06:56:42.000Z</published>
    <updated>2018-08-20T07:13:27.447Z</updated>
    
    <content type="html"><![CDATA[<p>首先介绍一下什么是hexo<br>hexo是一款博客框架,将支持的类型的文件转换成静态Web页面(html+css+js)<br>打开的终端<br>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo server<br>完成后出现一个blog的文件<br>运行 hexo s<br>hexo官方文档<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先介绍一下什么是hexo&lt;br&gt;hexo是一款博客框架,将支持的类型的文件转换成静态Web页面(html+css+js)&lt;br&gt;打开的终端&lt;br&gt;npm install hexo-cli -g&lt;br&gt;hexo init blog&lt;br&gt;cd blog&lt;br&gt;npm ins
      
    
    </summary>
    
      <category term="博客传" scheme="http://yoursite.com/Blog/categories/%E5%8D%9A%E5%AE%A2%E4%BC%A0/"/>
    
    
      <category term="-HEXO" scheme="http://yoursite.com/Blog/tags/HEXO/"/>
    
  </entry>
  
</feed>
